[[configfilters]]
== ConfigFilters

A `ConfigFilter` acts as a valve which is able to modify the configured values before they are returned to the caller.

An implementation of the specification is not required to ship with any `ConfigFilters` enabled by default.

A custom `ConfigFilter` must implement the interface `javx.config.spi.ConfigFilter` and is typically registered in a classpath resource `/META-INF/services/javx.config.spi.ConfigFilter` by including the fully-qualified class name of the custom implementation (well-known Java SE `java.util.ServiceLoader` mechanism).

Alternatively a user can register a `ConfigFilter` manually via `void Config#addConfigFilter(ConfigFilter configFilterToAdd)`.

=== Filtering a value for Usage

A `ConfigFilter` can e.g. be used to decrypt a stored password on the fly:

[source, java]
----
public class PasswordDecryptionConfigFilter implements ConfigFilter {
    @Override
    public String filterValue(String key, String value) {
        if (value != null && key.endsWith(".password")) {
            return decrypt(value);
        }
        return value;
    }

    @Override
    public String filterValueForLog(String key, String value) {
        // do nothing
        return value;
    }
}
----

=== Filtering a value for Logging

To prevent passwords and other secret information from being printed out or logged, a `ConfigFilter` can be used to mask those values.

[source, java]
----
public class PasswordConfigFilter implements ConfigFilter {
    @Override
    public String filterValue(String key, String value) {
        // do nothing
        return value;
    }

    @Override
    public String filterValueForLog(String key, String value) {
        if (value != null &&
            (key.contains("password") || key.contains("secret"))) {
            return "*******"; // simply star-out the password
        }
        return value;
    }
}

----
