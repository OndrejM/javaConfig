//
// Licensed under the Apache License, Version 2.0 (the "License").
// See the NOTICE file distributed with this work
// for additional information regarding copyright ownership.
// The author licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[architecture]]
== Architecture

This specification defines an easy to use and flexible system for application configuration.
It also defines a way to extend the configuration mechanism itself via a SPI (Service Provider Interface) in a portable way.

=== Rational

Released binaries often contain functionality which need to behave slightly differently depending on the deployment.
This might be different REST endpoints to talk with (e.g. depending on the customer for whom a WAR is deployed).
Or it might even be different features which need to be switched on and off depending on the installation.
All this must be possible without the need to re-package the whole application binary.

Microprofile-Config provides a way to achieve this goal by aggregating configuration from many different sources and presents a single merged view to the user.
This allows the application to bundle default configuration within the application.
It also allows to override the defaults from outside, e.g. via an environment variable a Java system property or via Docker.
Microprofile-Config also allows to implement and register own configuration sources in a portable way, e.g. for reading configuration values from a shared database in an application cluster.

=== Accessing a certain Configuration

The `ConfigProvider` is the central class to access a configuration.
It allows access to different configurations (represented by a `Config` instance) based on the application in which it is used.
We distinguish 3 different ways to resolve a `Config` instance:

* A factory method `ConfigProvider#getConfig()` to create a `Config` object based on automatically picked up `ConfigSources`
  of the Application identified by the current Thread Context ClassLoader classpath.
  Subsequent calls to this method for a certain Application will return the same `Config` instance.

* A factory method `ConfigProvider#getConfig(ClassLoader forClassLoader)` to create a `Config` object based on automatically picked up `ConfigSources`
  of the Application identified by the given ClassLoader.
  This can be used if the Thread Context ClassLoader does not represent the correct layer.
  E.g. if you need the Config for a class in a shared EAR lib folder.
  Subsequent calls to this method for a certain Application will return the same `Config` instance.

* A factory method `ConfigProvider#newConfig()` to create an empty `Config` object which can be filled manually via a builder.
  This configuration instance will not be shared by the `ConfigProvider`.
  This method is intended be used if a IoT container or any other external Factory can be used to give access to a manually created shared `Config`.

* A factory method `ConfigProvider#registerConfig()` to create an empty `Config` object which can be filled manually via a builder.
  This configuration instance *will* be shared by the `ConfigProvider`.
  Any subsequent call to `ConfigProvider#getConfig()` will return the registered `Config` instance.


All methods in the `ConfigProvider` and `Config` implementations are thread safe and reentrant.

If a `Config` is bound to an Application it is ensured that it gets properly removed if the Application gets destroyed.
The Config system deos not create any memory leaks in that case.

A `Config` can be release manually by calling `ConfigProvider#release(Config)`.
ConfigSources which implement the `java.io.Closeable` interface will be properly destroyed.
Any subsequent call to `ConfigProvider#getConfig()` or `ConfigProvider#getConfig(ClassLoader forClassLoader)` will result in a new `Config` instance.


=== Configuration Lookup Mechanism Example

The core Microprofile-Config mechanism is purely String/String based.
Type-safety is only provided on top of that by using the proper `Converter` before handing the value out to the caller.

The configuration key might use dot-separated namespaces similar to Java package namespacing:

[source, text]
----
com.acme.myproject.someserver.url = http://some.server/some/endpoint
com.acme.myproject.someserver.port = 9085
com.acme.myproject.someserver.active = true
com.acme.other.stuff.name = Karl
----

An application can access this configuration via a `Config` instance.

[source, java]
----
public class ConfigUsageSample {

    public void useTheConfig() {
        // get access to the Config instance
        Config config = ConfigProvider.getConfig();
        String serverUrl = config.getValue("com.acme.myproject.someserver.url");
        Integer serverPort = config.getValue("com.acme.myproject.someserver.port",
                                             Integer.class);

        callToServer(serverUrl, serverPort);
    }
}
----

If you need to access a different server then you can e.g. change the configuration via a `-D` system property:

[source, text]
----
$> java -jar some.jar -Dcom.acme.myproject.someserver.url=http://other.server/other/endpoint
----

Note that the way to inject this configuration into the application can be extended by providing custom `ConfigSource` s.
