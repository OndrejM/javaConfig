[[configsources]]
== ConfigSources

A `ConfigSource` is exactly what its name says: a source for configured values.
The `Config` uses all configured implementations of `ConfigSource` to lookup the property in question.

=== ConfigSource Ordering

Each `ConfigSource` has a specified `ordinal`.
This ordinal getâ€™s used to determine the importance of the values taken from the very `ConfigSource`.
A higher ordinal means that the values taken from this ConfigSource will override values from less important ConfigSources.
This is the trick which allows to amend configuration from outside a binary - given those outside ConfigSources have a higher `ordinal` than the ones who pickup the values from within the release binaries.

It can also be used to implement a drop-in configuration approach.
Simply create a jar containing a `ConfigSource` with a higher ordinal and overwrite configuration values in it.
If the jar gets added to the classpath then it will overwrite the configuration from `ConfigSource` s with lower ordinal.

The ordinal for property file based `ConfigSource` s can be configured using the key `config_ordinal` inside the property file.

[source, text]
----
config_ordinal = 120
com.acme.myproject.someserver.url = http://more_important.server/some/endpoint
----

=== Default ConfigSources

A Java-config implementation must provide `ConfigSource` s for the following data out of the box:

* System properties (ordinal=400)
* Environment properties (ordinal=300)
* An own `ConfigSource` for each property file `META-INF/java-config.properties` on the classpath. (default ordinal = 100)

=== Custom ConfigSources

ConfigSources are picked up using the `java.util.ServiceLoader` mechanism.

To add a custom `ConfigSource`, you have to implement the interface `javx.config.spi.ConfigSource`.

[source, java]
----
public class CustomDbConfigSource implements ConfigSource {

    @Override
    public int getOrdinal() {
        return 112;
    }

    @Override
    public Map<String, String> getProperties() {
        return readPropertiesFromDb();
    }

    @Override
    public String getPropertyValue(String key) {
        return readPropertyFromDb(key);
    }

    @Override
    public String getConfigName() {
        return "customDbConfig";
    }

    @Override
    public boolean isScannable() {
        return true;
    }

    // + methods to read from the DB
}

----

Then register your implementation in a file `/META-INF/services/javx.config.spi.ConfigSource` by writing the fully qualified class name of the custom implementation into it.


=== Custom ConfigSources via ConfigSourceProvider

If you need dynamic ConfigSources you can also register a `ConfigSourceProvider` in a similar way.
This is useful if you like to dynamically pick up multiple `ConfigSource` s of the same kind.
For example, if you like to pick up all myproject.properties files from all the JARs in your classpath.

A custom `ConfigSourceProvider` needs to implement the interface `javx.config.spi.ConfigSourceProvider`.
Register your implementation in a file `/META-INF/services/javx.config.spi.ConfigSourceProvider` by writing the fully qualified class name of the custom implementation/s into it.

An example which registers all yaml files with the name `exampleconfig.yaml`:

[source, java]
----
public class ExampleYamlConfigSourceProvider implements javx.config.spi.ConfigSourceProvider {
    @Override
    public List<ConfigSource> getConfigSources(ClassLoader forClassLoader) {
        List<ConfigSource> configSources = new ArrayList<>();

        Enumeration<URL> yamlFiles = null;
        yamlFiles = forClassLoader.getResources("sampleconfig.yaml");
        while (yamlFiles.hasMoreElements()) {
            configSources.add(new SampleYamlConfigSource(yamlFiles.nextElement()));
        }
        return configSources;
    }
}
----

Please note that a single `ConfigSource` should be either registered directly or via a `ConfigSourceProvider`, but never both ways.


=== PropertyFileConfig

You can also make Java-config to pick up your own property files as `ConfigSource` s.
The following example will pick up all property files with the name `some/custom.properties` from the classpath.

[source, java]
----
public class CustomPropertyFileConfig implements PropertyFileConfig {
    @Override
    public String getPropertyFileName() {
        return "some/custom.properties";
    }

    @Override
    public boolean isOptional() {
        return false;
    }
}
----

Register your implementation in a file `/META-INF/services/javx.config.spi.PropertyFileConfig` by writing the fully qualified class name of your `PropertyFileConfig` into it.


=== ConfigSource and Mutable Data

A `Config` instance provides no caching but iterates over all `ConfigSources` for each `getValue(String)` operation.
A ConfigSource is allowed to cache the underlying values itself.
